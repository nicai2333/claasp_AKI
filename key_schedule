import re

def find_first_number(s):
    """返回字符串中第一个连续数字序列（如 'rot_2_2' → '2'）"""
    match = re.finditer(r'\d+', s)
    return next(match, None).group() if match else None


def replace_number(s, new_num):
    parts = s.split('_')
    if len(parts) < 3:
        raise ValueError("str should be include two '_' ")
    parts[2] = str(new_num)
    return '_'.join(parts)


def key_schedule_algorithm(self):
        key_size = self.inputs_size_to_dict()['key']
        key_schedule_component_ids = get_key_schedule_component_ids(self)
        key_schedule_instance = Cipher(f"{self.id}{KEY_SCHEDULE_ALGORITHM}", f"{self.type}", ['key'], 
                                       [key_size], self.inputs_size_to_dict()['key'])
        key_schedule_component = []

        for ids in key_schedule_component_ids:
            if ids == 'key' : continue
            component = self.get_component_from_id(ids)

            new_component = Component(component.id, component.type, Input(component.input_bit_size, 
                                                                          component.input_id_links, component.input_bit_positions),
                                    component.output_bit_size, component.description)
            new_component.__class__ = component.__class__
            key_schedule_component.append(new_component)
            
        for _ in range(self.number_of_rounds):
            key_schedule_instance.add_round()
        for components in key_schedule_component:
            round = int(find_first_number(components.id))
            key_schedule_instance._rounds.round_at(round)._components.append(components)
        id = key_schedule_instance.get_all_components_ids()[-1]
        key_schedule_instance.add_cipher_output_component([id],[list(range(key_size))],key_size)
        sorted_KSA = sort_cipher_graph(key_schedule_instance)
        return sorted_KSA
    
    def key_schedule_inverse(self):
        key_size = self.inputs_size_to_dict()['key']
        key_schedule_instance = Cipher(f"{self.id}{KEY_SCHEDULE_ALGORITHM}", f"{self.type}", [], 
                                       [], self.inputs_size_to_dict()['key'])

        key_schedule_component_ids = self.get_all_components_ids()

        inverted_KSA_components = []
        cipher_components_tmp = get_cipher_components(self)
        available_bits = []
        all_equivalent_bits = get_all_equivalent_bits(self)
        x = 0 
        y = 0
        while len(cipher_components_tmp) > 0:
            # print(len(cipher_components_tmp))
            number_of_unprocessed_components = 0
            for c in cipher_components_tmp:
                # print(c.id, "---------", len(cipher_components_tmp))
                # OPTION 1 - Add components that are not invertible
                if are_there_enough_available_inputs_to_evaluate_component(c, available_bits, all_equivalent_bits,
                                                                           key_schedule_component_ids, self):
                    # print("--------> evaluated")
                    # print("y=",y)
                    # y+=1
                    # print(c)
                    # print()
                    inverted_component = evaluated_component(c, available_bits, key_schedule_component_ids,
                                                             all_equivalent_bits, self)
                    update_available_bits_with_component_output_bits(c, available_bits, self)
                    inverted_KSA_components.append(inverted_component)
                    cipher_components_tmp.remove(c)
                # OPTION 2 - Add components that are invertible
                elif (is_possibly_invertible_component(c) and are_there_enough_available_inputs_to_perform_inversion(c,
                                                                                                                     available_bits,
                                                                                                                     all_equivalent_bits,
                                                                                                                     self)) or (
                        c.type == CIPHER_INPUT and (c.description[0] == INPUT_KEY or c.description[0] == INPUT_TWEAK)):
            
                    # print("--------> inverted")
                    inverted_component = component_inverse(c, available_bits, all_equivalent_bits,
                                                           key_schedule_component_ids, self)
                    update_available_bits_with_component_input_bits(c, available_bits)
                    update_available_bits_with_component_output_bits(c, available_bits, self)
                    inverted_KSA_components.append(inverted_component)
                    cipher_components_tmp.remove(c)
                else:
                    number_of_unprocessed_components += 1
                    if number_of_unprocessed_components == len(cipher_components_tmp):
                        raise Error("Unable to invert cipher for now.")

                        # STEP 3 - rebuild cipher
        print(inverted_KSA_components)
        print()
        for _ in range(self.number_of_rounds):
            key_schedule_instance.add_round()
        for component in inverted_KSA_components:
            if component.type == CIPHER_INPUT:
                print(component)
                print(component.id)
                print(key_schedule_instance.inputs)
                key_schedule_instance.inputs.append(component.id)
                key_schedule_instance.inputs_bit_size.append(component.output_bit_size)
            elif component.type == CIPHER_OUTPUT and component.id != key:
                key_schedule_instance._rounds.round_at(self.number_of_rounds - 1)._components.append(component)
            else:
                key_schedule_instance._rounds.round_at(self.number_of_rounds - 1 - component.round)._components.append(
                    component)

        sorted_inverted_cipher = sort_cipher_graph(key_schedule_instance)

        return sorted_inverted_cipher,inverted_KSA_components

